Vov.agg1 <- Vov.agg[Vov.agg$time > date1.ini & Vov.agg$time < date1.end  ,]
BCOD.agg1 <- BCOD.agg[BCOD.agg$time > date1.ini & BCOD.agg$time < date1.end  ,]
BNH4.agg1 <- BNH4.agg[BNH4.agg$time > date1.ini & BNH4.agg$time < date1.end  ,]
CODs.summ1 <- CODs.summ[CODs.summ$time > date1.ini & CODs.summ$time < date1.end  ,]
NH4s.summ1 <- NH4s.summ[NH4s.summ$time > date1.ini & NH4s.summ$time < date1.end  ,]
CODr.summ1 <- CODr.summ[CODr.summ$time > date1.ini & CODr.summ$time < date1.end  ,]
Plot.stacked(var.p = P.summ1, var1 = Vov.agg1, var2 = CODs.summ1, var3 = NH4s.summ1,
var4 = CODr.summ1, var5 = BCOD.agg1, var6 = BNH4.agg1, data.bar = data.bar1,
var.name, delta, date.ini=date1.ini, date.end=date1.end, width = 10/2.5)
##===========================================================================================
## preparing data for bar plot (time series)
##===========================================================================================
head(data1)
data1.agg <- Agg.t(data1, "", 60*24, mean, "")
summary(data1.agg)
data2.agg <- Agg.t(data2, "", 60*24, mean, "")
summary(data2.agg)
data3.agg <- Agg.t(data3, "", 60*24, mean, "")
summary(data3.agg)
data4.agg <- Agg.t(data4, "", 60*24, mean, "")
summary(data4.agg)
for(i in 1:nrow(data1.agg)){
data22.p <- (data1.agg[,2] - data2.agg[,2])/data1.agg[,2]*100
data33.p <- (data1.agg[,2] - data3.agg[,2])/data1.agg[,2]*100
data44.p <- (data1.agg[,2] - data4.agg[,2])/data1.agg[,2]*100
}
data.p <- cbind.data.frame(data1.agg[,1])
data.p <- cbind.data.frame(data.p, data1.agg[,2], data22.p, data33.p, data44.p)
colnames(data.p) <- c("time", "var.total", "var1","var2","var3")
data.p[,2:5][data.p[,2:5] < 0] <- 0
summary(data.p)
data.p[,2] <- 100 - data.p[,3] - data.p[,4] - data.p[,5]
colnames(data.p) <- c("time", "P", "var1", "var2", "var3")
data.p[,2:5][is.na(data.p[,2:5] == TRUE)] <- 0
data.p[,2:5][data.p[,2:5] < 0] <- 0
data.p <- data.p[, c("time", "var1", "var2", "var3", "P")]
colnames(data.p) <- c("time", "CODs", "NH4s", "CODr", "P")
summary(data.p)
head(data.p)
## plot complete time series
library(data.table)
data.melt <- melt(data.p, id.vars = 'time')
str(data.melt)
# namePlot <-  paste("contributionsTS_barplot_", var.name, "_", round(delta/60, 2), "h", ".pdf", sep="")
# library(ggplot2)
# pdf(width=10, height=15/5, file= namePlot)
# ggplot(data.melt, aes(x = time, y = value, fill = variable)) +
#   geom_bar(stat = 'identity', position = 'fill') +
#   ylab(paste0(substr(ylab, 1, 4), ", percentage of variation")) +
#   scale_fill_brewer(palette="Spectral",direction = 1) +
#   theme(plot.margin = unit(c(1,10,5,6),units="points"))
# dev.off()
#
# ## plot subset
# data.p.subset <- data.p[data.p$time > date1.ini & data.p$time < date1.end  ,]
# head(data.p.subset)
# namePlot <-  paste("contributionsTS_barplot_", var.name, "_", date1.ini, "_", date1.end, "_", round(delta/60, 2), "h", ".pdf", sep="")
#
# data.melt <- melt(data.p.subset, id.vars = 'time')
#
# pdf(width=10, height=15/5, file= namePlot)
# ggplot(data.melt, aes(x = time, y = value, fill = variable)) +
#   geom_bar(stat = 'identity', position = 'fill') +
#   ylab(paste0(substr(ylab, 1, 4), ", percentage of variation")) +
#   scale_fill_brewer(palette="Spectral",direction = 1) +
#   theme(plot.margin = unit(c(1,10,5,6),units="points"))
# dev.off()
#
# namePlot <-  paste("contributionsTS_areaplot_", var.name, "_", date1.ini, "_", date1.end, "_", round(delta/60, 2), "h", ".pdf", sep="")
# pdf(width=8.5/3*1.5, height=11/6*1.5, file= namePlot)
# ggplot(data.melt, aes(x = time, y = value, fill = variable)) +
#   geom_area() +
#   scale_fill_brewer(palette="Spectral",direction = 1)
# dev.off()
##===========================================================================================
## TS + bar plot (time series) -- combination -- full year
##===========================================================================================
## call Plot.stacked.combined function
namePlot <-  paste("contributionsTS_barplot_combined_", var.name, "_", date.ini, "_", date.end, "_", round(delta/60, 2), "h", ".pdf", sep="")
Plot.stacked.combined(data.bar, data.melt, namePlot, ylab)
##===========================================================================================
## TS + bar plot (time series) -- combination -- zoom window
##===========================================================================================
## plot subset
data.p.subset <- data.p[data.p$time > date1.ini & data.p$time < date1.end,]
head(data.p.subset)
data.melt1 <- melt(data.p.subset, id.vars = 'time')
namePlot <-  paste("contributionsTS_barplot_combined_", var.name, "_", date1.ini, "_", date1.end, "_", round(delta/60, 2), "h", ".pdf", sep="")
Plot.stacked.combined(data.bar1, data.melt1, namePlot, ylab)
setwd(folder.current)
print("end of computation ... OK")
getwd()
#' Alternatively we can incorporate the animation directly into a pdf—though for
#' this to work we need to work with LaTeX and use the LaTeX animate-package.
require("animation")
#' Alternatively we can incorporate the animation directly into a pdf—though for
#' this to work we need to work with LaTeX and use the LaTeX animate-package.
require("animation")
oopt = ani.options(interval = 0.02, nmax = 100)
test.function = function (xy, I, nmax) {
x = xy[,1]
y = xy[,2]
scIcubed = I^(1/4)/(max(I[,10:IT]^(1/4)))
for (i in seq_len(ani.options("nmax"))) {
dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
}
}
saveLatex({
test.function(xy=xy, I=I, nmax=50)
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
#' Alternatively we can incorporate the animation directly into a pdf—though for
#' this to work we need to work with LaTeX and use the LaTeX animate-package.
require("animation")
oopt = ani.options(interval = 0.02, nmax = 100)
test.function = function (xy, I, nmax) {
x = xy[,1]
y = xy[,2]
scIcubed = I^(1/4)/(max(I[,10:IT]^(1/4)))
for (i in seq_len(ani.options("nmax"))) {
dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
}
}
saveLatex({
test.function(xy=xy, I=I, nmax=50)
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
#' Alternatively we can incorporate the animation directly into a pdf—though for
#' this to work we need to work with LaTeX and use the LaTeX animate-package.
m = 0.25
ny = nx = 30
# generate coordinates
xy = expand.grid(x = 1:nx, y = 1:ny)
require("animation")
oopt = ani.options(interval = 0.02, nmax = 100)
test.function = function (xy, I, nmax) {
x = xy[,1]
y = xy[,2]
scIcubed = I^(1/4)/(max(I[,10:IT]^(1/4)))
for (i in seq_len(ani.options("nmax"))) {
dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
}
}
saveLatex({
test.function(xy=xy, I=I, nmax=50)
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
#' The S and I matrices will hold the results from the simulation. We will run the
#' model for IT=520 iterations (= 20 years). Assume that all patches have S0 =
#' 100 susceptibles and that 1 infected is introduced in location {400, 1}:
IT = 520
S = I = matrix(NA, nrow = ny * nx, ncol = IT)
S[, 1] = 100
I[, 1] = 0
I[400, 1] = 1
require("animation")
oopt = ani.options(interval = 0.02, nmax = 100)
test.function = function (xy, I, nmax) {
x = xy[,1]
y = xy[,2]
scIcubed = I^(1/4)/(max(I[,10:IT]^(1/4)))
for (i in seq_len(ani.options("nmax"))) {
dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
}
}
saveLatex({
test.function(xy=xy, I=I, nmax=50)
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
seq_len(ani.options("nmax")
)
i = 1
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
x = xy[,1]
y = xy[,2]
scIcubed = I^(1/4)/(max(I[,10:IT]^(1/4)))
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
oopt = ani.options(interval = 0.02, nmax = 100)
test.function = function (xy, I, nmax) {
x = xy[,1]
y = xy[,2]
scIcubed = I^(1/4)/(max(I[,10:IT]^(1/4)))
for (i in seq_len(ani.options("nmax"))) {
dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
}
}
saveLatex({
test.function(xy=xy, I=I, nmax=50)
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
test.function(xy=xy, I=I, nmax=50)
oopt = ani.options(interval = 0.02, nmax = 100)
test.function = function (xy, I, nmax) {
x = xy[,1]
y = xy[,2]
scIcubed = I^(1/4)/(max(I[,10:IT]^(1/4)))
for (i in seq_len(ani.options("nmax"))) {
dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
}
}
saveLatex({
test.function(xy=xy, I=I, nmax=50)
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
brownian.motion()
saveLatex({
brownian.motion()
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
saveLatex({
brownian.motion()
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/bin/pdflatex",
img.name = "Xplot")
oopt = ani.options(interval = 0.02, nmax = 120)
saveLatex({
brownian.motion()
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/bin/pdflatex",
img.name = "Xplot")
saveLatex({
brownian.motion()
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/bin/pdflatex",
img.name = "Xplot")
rm(list = ls())
data <- structure(list(Time = 1:7,
A = c(33046, 970250, 1870125, 259625, 3838750, 962333, 2272917),
B = c(196, 578, 323, 509, 215, 5437, 41028),
C = c(0.81, 0.94, 2.31, 12.2, 11.5, 4.7, 10.1)),
row.names = c(NA, -7L),
class = c("tbl_df", "tbl", "data.frame"))
opar <- par(mar = c(5,4,4,4) + 0.1)
plot(data$Time, data$A, type = "l",  xlim = NULL, ylim = c(100,10000000),
log = "y", main = "Title", xlab = "Time", ylab = "copies", col= "blue")
par(new = TRUE)
plot(data$Time, data$B, type = "l",  xlim = NULL, ylim = c(100,10000000),
log = "y", main = "", xlab = "", ylab = "", col= "green")
par(new = TRUE)
plot(data$C, type = "l", xaxt = "n", yaxt = "n",
ylab = "", xlab = "", col = "red", lty = 2, )
axis(side = 4)
mtext("secondary axis", side = 4, line = 3, col="red")
legend("topleft", c("A", "B", "C"),
col = c("blue", "green", "red"), lty = c(1, 1, 2))
par(opar)
plot(data$Time, data$A, type = "l",  xlim = NULL, ylim = c(100,10000000),
log = "y", main = "Title", xlab = "Time", ylab = "copies", col= "blue")
require(quantmod)
getQuote("QQQQ;SPY", what=yahooQF("Last Trade (Price Only)"))
getSymbols()
library(BatchGetSymbols)
first.date <- Sys.Date()-60
last.date <- Sys.Date()
df.SP500 <- GetSP500Stocks()
tickers <- df.SP500$Tickers
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)
print(l.out$df.control)
print(l.out$df.tickers)
# footsie
df.FTSE100 <- GetFTSE100Stocks()
print(df.FTSE100$tickers)
tickers.ftse100 <- df.FTSE100$Tickers
print(tickers.ftse100)
tickers.ftse100 <- df.FTSE100$Tickers
print(tickers.ftse100)
df.FTSE100 <- GetFTSE100Stocks()
tickers.ftse100 <- df.FTSE100$Tickers
print(tickers.ftse100)
print(df.FTSE100$tickers)
df.FTSE100 <- GetFTSE100Stocks()
tickers.ftse100 <- df.FTSE100$Tickers
print(df.FTSE100$tickers)
tickers.ftse100 <- print(df.FTSE100$Tickers)
print(df.FTSE100$tickers)
tickers.ftse100 <- print(df.FTSE100$tickers)
tickers.ftse100 <- df.FTSE100$tickers
print(tickers.ftse100)
tickers.ftse <- df.FTSE100$tickers
print(tickers.ftse)
l.out.ftse <- BatchGetSymbols(tickers = tickers.ftse,
first.date = first.date,
last.date = last.date)
print(l.out.ftse$df.control)
print(l.out.ftse$df.tickers)
print(tickers.ftse)
getQuote("QQQQ;SPY", what=yahooQF("Last Trade (Price Only)"))
require(quantmod)
getQuote("QQQQ;SPY", what=yahooQF("Last Trade (Price Only)"))
getQuote("III", what=yahooQF("Last Trade (Price Only)"))
getQuote("III", what=yahooQF("Last Trade (Price Only)"))
getQuote("III", what=yahooQF("Last Trade (Price Only)"))
getQuote("III", what=yahooQF("Last Trade (Price Only)"))
getQuote("III")
setwd("~/Documents/02_working/3-Production/05_IV-Year/05_models/09_EmiStatR/R/output_reproducible")
#' Setup
#' --------------------------------------------------------------------------------------------------
#+ setup, echo=TRUE, eval=TRUE, include=TRUE
library(knitr)
library(gridExtra)
library(tikzDevice)
Sys.setenv("LANGUAGE"="En")
Sys.setlocale("LC_ALL", "en_GB.UTF-8")
timing.ini <- Sys.time()
#' Loading data
#' --------------------------------------------------------------------------------------------------
#+  load_data, echo=TRUE, eval=TRUE, include=TRUE
load("data/data_mc_output.RData")
#' Function to create plot
My.pot.plot <- function(data1, xlab, ylab, y.intercept1, y.intercept2, breaks, breaks.minor, labels, xlim){
data1.xts <- xts(data1, order.by = data1[,1])
y.max <- max(as.numeric(data1.xts[paste0(xlim[1], "/", xlim[2])]$q995))
plot1 <- ggplot(data1, aes(x = Index, y = q995)) +
theme_bw() +
scale_x_datetime(name = xlab, breaks = breaks, labels = labels, limits = xlim,
minor_breaks = breaks.minor) +
ylim(0, y.max*1.10) +
theme(plot.margin = unit(c(1,12,5,6), units="points"),
axis.text.x = element_text(angle = 90, vjust = 0.5,  hjust = 0),
text = element_text(size=22)) +
geom_ribbon(aes(ymin=q05,ymax=q95), fill="grey90", alpha=1) +
geom_ribbon(aes(ymin=q005,ymax=q995), fill="grey70", alpha=.3) +
geom_line(aes(y = mean),lwd = 0.5, colour = "blue") +
geom_hline(yintercept=y.intercept1, linetype="dotted", color = "red") +
geom_hline(yintercept=y.intercept2, linetype="dashed", color = "red") +
#geom_line(aes(y = q05, colour = "grey"), size = 0.05)+
#geom_line(aes(y = q95, colour = "grey"), size = 0.05)+
labs(y = ylab, x = xlab)
return(plot1)
}
#' Function to compose plot
My.plot.composed <- function(time.plot.ini, time.plot.end, breaks.by,
ylim_p, ylim1, ylim2, ylim3, ylim4, ylim5){
breaks <- seq.POSIXt(from = time.plot.ini, by = breaks.by, to = time.plot.end)
breaks.minor <- seq.POSIXt(from = time.plot.ini, by = 60*60*1, to = time.plot.end)
labels <- format(breaks, "%b %d %H:%M")
xlim <- c(time.plot.ini, time.plot.end)
(plot_p <- My.pot.plot(data1 = data.p, xlab = "", ylab = "P [mm]",  y.intercept1 = NULL, y.intercept2 = NULL,
breaks = breaks, breaks.minor = breaks.minor, labels = labels, xlim = xlim
))
plot_p <- plot_p + theme(axis.text.x = element_blank())
(plot1 <- My.pot.plot(data1 = data.qsv, xlab = "", ylab = "Qsv [l/s]",  y.intercept1 = 37.5, y.intercept2 = 75,
breaks = breaks, breaks.minor = breaks.minor, labels = labels, xlim = xlim
))
plot1 <- plot1 + theme(axis.text.x = element_blank())
(plot2 <- My.pot.plot(data1 = data.bcod, xlab = "", ylab = "BCOD,Sv [kg]",  y.intercept1 = NULL, y.intercept2 = NULL,
breaks = breaks, breaks.minor = breaks.minor, labels = labels, xlim = xlim
))
plot2 <- plot2 + theme(axis.text.x = element_blank())
(plot3 <- My.pot.plot(data1 = data.bnh4, xlab = "", ylab = "BNH4,Sv [kg]",  y.intercept1 = NULL, y.intercept2 = NULL,
breaks = breaks, breaks.minor = breaks.minor, labels = labels, xlim = xlim
))
plot3 <- plot3 + theme(axis.text.x = element_blank())
(plot4 <- My.pot.plot(data1 = data.ccod, xlab = "", ylab = "CCOD,Sv,av [mg/l]",  y.intercept1 = 90, y.intercept2 = 125,
breaks = breaks, breaks.minor = breaks.minor, labels = labels, xlim = xlim
))
plot4 <- plot4 + theme(axis.text.x = element_blank())
(plot5 <- My.pot.plot(data1 = data.cnh4, xlab = "", ylab = "CNH4,Sv,av [mg/l]",  y.intercept1 = 2.5, y.intercept2 = 5,
breaks = breaks, breaks.minor = breaks.minor, labels = labels, xlim = xlim
))
# Get the gtables
g_p <- ggplotGrob(plot_p)
g1  <- ggplotGrob(plot1)
g2  <- ggplotGrob(plot2)
g3  <- ggplotGrob(plot3)
g4  <- ggplotGrob(plot4)
g5  <- ggplotGrob(plot5)
# Set the widths
g_p$widths <- g2$widths
g3$widths <- g2$widths
g4$widths <- g2$widths
g5$widths <- g2$widths
gp <- list(g_p, g1, g2, g3, g4, g5)
}
# full year
time.plot.ini <- time.ts.agg[1]
time.plot.end <- time.ts.agg[length(time.ts.agg)]
# pdf(file = paste0(folder.output,"/pot_all_",as.Date(time.plot.ini),"_", as.Date(time.plot.end), ".pdf"), width = 500, height = 50) # full year
gp1 <- My.plot.composed(time.plot.ini <- as.POSIXct("2010-03-20 19:00:00"),
time.plot.end <- as.POSIXct("2010-03-21 07:00:00"),
breaks.by = 60*60*3
)
library(xts)
# pdf(file = paste0(folder.output,"/pot_all_",as.Date(time.plot.ini),"_", as.Date(time.plot.end), ".pdf"), width = 500, height = 50) # full year
gp1 <- My.plot.composed(time.plot.ini <- as.POSIXct("2010-03-20 19:00:00"),
time.plot.end <- as.POSIXct("2010-03-21 07:00:00"),
breaks.by = 60*60*3
)
library(ggplot)
library(ggplot2)
library(gridExtra)
library(tikzDevice)
# pdf(file = paste0(folder.output,"/pot_all_",as.Date(time.plot.ini),"_", as.Date(time.plot.end), ".pdf"), width = 500, height = 50) # full year
gp1 <- My.plot.composed(time.plot.ini <- as.POSIXct("2010-03-20 19:00:00"),
time.plot.end <- as.POSIXct("2010-03-21 07:00:00"),
breaks.by = 60*60*3
)
gp2 <- My.plot.composed(time.plot.ini <- as.POSIXct("2010-05-28 05:00:00"),
time.plot.end <- as.POSIXct("2010-05-30 06:00:00"),
breaks.by = 60*60*3
)
grid.arrange(gp1[[1]], gp2[[1]],gp1[[2]],gp2[[2]],gp1[[3]],gp2[[3]],
gp1[[4]], gp2[[4]],gp1[[5]],gp2[[5]],gp1[[6]],gp2[[6]],
heights = c(.93/6, .93/6, .93/6, .93/6, .93/6, 1.35/6), nrow = 6)
gp2 <- My.plot.composed(time.plot.ini <- as.POSIXct("2010-05-28 05:00:00"),
time.plot.end <- as.POSIXct("2010-05-30 06:00:00"),
breaks.by = 60*60*3
)
gp4 <- My.plot.composed(time.plot.ini <- as.POSIXct("2010-09-07 00:00:00"),
time.plot.end <- as.POSIXct("2010-09-09 02:00:00"),
breaks.by = 60*60*3
)
pdf(file = paste0("output/pot_all_",as.Date("2010-05-28 05:00:00"),"_", as.Date("2010-05-30 06:00:00"), ".pdf"), width = 22, height = 22)
grid.arrange(gp2[[1]], gp4[[1]],gp2[[2]],gp4[[2]],gp2[[3]],gp4[[3]],
gp2[[4]], gp4[[4]],gp2[[5]],gp4[[5]],gp2[[6]],gp4[[6]],
heights = c(.93/6, .93/6, .93/6, .93/6, .93/6, 1.35/6), nrow = 6)
dev.off()
# final plot to HESS paper
tikz(file = paste0("output/pot_all_",as.Date("2010-05-28 05:00:00"),"_", as.Date("2010-05-30 06:00:00"), ".tex"), width = 22, height = 22)
# pdf(file = paste0("output/pot_all_",as.Date("2010-05-28 05:00:00"),"_", as.Date("2010-05-30 06:00:00"), ".pdf"), width = 22, height = 22)
grid.arrange(gp2[[1]], gp4[[1]],gp2[[2]],gp4[[2]],gp2[[3]],gp4[[3]],
gp2[[4]], gp4[[4]],gp2[[5]],gp4[[5]],gp2[[6]],gp4[[6]],
heights = c(.93/6, .93/6, .93/6, .93/6, .93/6, 1.35/6), nrow = 6)
dev.off()
#' Render latex file to pdf
#' --------------------------------------------------------------------------------------------------
#+  latex2pdf, echo=TRUE, eval=TRUE, include=FALSE
setwd("output")
system("pdflatex fig05.tex")
